# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Reddit_pb2 as Reddit__pb2


class RedditServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/RedditService/CreatePost',
                request_serializer=Reddit__pb2.Post.SerializeToString,
                response_deserializer=Reddit__pb2.Post.FromString,
                )
        self.UpvotePost = channel.unary_unary(
                '/RedditService/UpvotePost',
                request_serializer=Reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Post.FromString,
                )
        self.DownvotePost = channel.unary_unary(
                '/RedditService/DownvotePost',
                request_serializer=Reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Post.FromString,
                )
        self.RetrieveAllPosts = channel.unary_unary(
                '/RedditService/RetrieveAllPosts',
                request_serializer=Reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=Reddit__pb2.PostResponse.FromString,
                )
        self.RetrievePostContent = channel.unary_unary(
                '/RedditService/RetrievePostContent',
                request_serializer=Reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Post.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/RedditService/CreateComment',
                request_serializer=Reddit__pb2.Comment.SerializeToString,
                response_deserializer=Reddit__pb2.Comment.FromString,
                )
        self.UpvoteComment = channel.unary_unary(
                '/RedditService/UpvoteComment',
                request_serializer=Reddit__pb2.CommentRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Comment.FromString,
                )
        self.DownvoteComment = channel.unary_unary(
                '/RedditService/DownvoteComment',
                request_serializer=Reddit__pb2.CommentRequest.SerializeToString,
                response_deserializer=Reddit__pb2.Comment.FromString,
                )
        self.RetrieveAllComments = channel.unary_unary(
                '/RedditService/RetrieveAllComments',
                request_serializer=Reddit__pb2.PostRequest.SerializeToString,
                response_deserializer=Reddit__pb2.CommentResponse.FromString,
                )
        self.RetrieveUpvotedComments = channel.unary_unary(
                '/RedditService/RetrieveUpvotedComments',
                request_serializer=Reddit__pb2.PostRequest2.SerializeToString,
                response_deserializer=Reddit__pb2.UpvotedCommentsResponse.FromString,
                )
        self.ExpandCommentBranch = channel.unary_unary(
                '/RedditService/ExpandCommentBranch',
                request_serializer=Reddit__pb2.CommentBranchRequest.SerializeToString,
                response_deserializer=Reddit__pb2.CommentBranchResponse.FromString,
                )
        self.MonitorUpdates = channel.unary_stream(
                '/RedditService/MonitorUpdates',
                request_serializer=Reddit__pb2.UpdatesRequest.SerializeToString,
                response_deserializer=Reddit__pb2.UpdatesResponse.FromString,
                )


class RedditServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreatePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvotePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownvotePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveAllPosts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrievePostContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvoteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownvoteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveAllComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveUpvotedComments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandCommentBranch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorUpdates(self, request, context):
        """Extra Credit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedditServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=Reddit__pb2.Post.FromString,
                    response_serializer=Reddit__pb2.Post.SerializeToString,
            ),
            'UpvotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvotePost,
                    request_deserializer=Reddit__pb2.PostRequest.FromString,
                    response_serializer=Reddit__pb2.Post.SerializeToString,
            ),
            'DownvotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.DownvotePost,
                    request_deserializer=Reddit__pb2.PostRequest.FromString,
                    response_serializer=Reddit__pb2.Post.SerializeToString,
            ),
            'RetrieveAllPosts': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveAllPosts,
                    request_deserializer=Reddit__pb2.PostRequest.FromString,
                    response_serializer=Reddit__pb2.PostResponse.SerializeToString,
            ),
            'RetrievePostContent': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrievePostContent,
                    request_deserializer=Reddit__pb2.PostRequest.FromString,
                    response_serializer=Reddit__pb2.Post.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=Reddit__pb2.Comment.FromString,
                    response_serializer=Reddit__pb2.Comment.SerializeToString,
            ),
            'UpvoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvoteComment,
                    request_deserializer=Reddit__pb2.CommentRequest.FromString,
                    response_serializer=Reddit__pb2.Comment.SerializeToString,
            ),
            'DownvoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.DownvoteComment,
                    request_deserializer=Reddit__pb2.CommentRequest.FromString,
                    response_serializer=Reddit__pb2.Comment.SerializeToString,
            ),
            'RetrieveAllComments': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveAllComments,
                    request_deserializer=Reddit__pb2.PostRequest.FromString,
                    response_serializer=Reddit__pb2.CommentResponse.SerializeToString,
            ),
            'RetrieveUpvotedComments': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveUpvotedComments,
                    request_deserializer=Reddit__pb2.PostRequest2.FromString,
                    response_serializer=Reddit__pb2.UpvotedCommentsResponse.SerializeToString,
            ),
            'ExpandCommentBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExpandCommentBranch,
                    request_deserializer=Reddit__pb2.CommentBranchRequest.FromString,
                    response_serializer=Reddit__pb2.CommentBranchResponse.SerializeToString,
            ),
            'MonitorUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.MonitorUpdates,
                    request_deserializer=Reddit__pb2.UpdatesRequest.FromString,
                    response_serializer=Reddit__pb2.UpdatesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RedditService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RedditService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/CreatePost',
            Reddit__pb2.Post.SerializeToString,
            Reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/UpvotePost',
            Reddit__pb2.PostRequest.SerializeToString,
            Reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownvotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/DownvotePost',
            Reddit__pb2.PostRequest.SerializeToString,
            Reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveAllPosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/RetrieveAllPosts',
            Reddit__pb2.PostRequest.SerializeToString,
            Reddit__pb2.PostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrievePostContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/RetrievePostContent',
            Reddit__pb2.PostRequest.SerializeToString,
            Reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/CreateComment',
            Reddit__pb2.Comment.SerializeToString,
            Reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/UpvoteComment',
            Reddit__pb2.CommentRequest.SerializeToString,
            Reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownvoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/DownvoteComment',
            Reddit__pb2.CommentRequest.SerializeToString,
            Reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveAllComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/RetrieveAllComments',
            Reddit__pb2.PostRequest.SerializeToString,
            Reddit__pb2.CommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveUpvotedComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/RetrieveUpvotedComments',
            Reddit__pb2.PostRequest2.SerializeToString,
            Reddit__pb2.UpvotedCommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandCommentBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RedditService/ExpandCommentBranch',
            Reddit__pb2.CommentBranchRequest.SerializeToString,
            Reddit__pb2.CommentBranchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/RedditService/MonitorUpdates',
            Reddit__pb2.UpdatesRequest.SerializeToString,
            Reddit__pb2.UpdatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
